{"version":3,"file":"0.main.js","sources":["webpack:///./src/Comments.js","webpack:///./src/data.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n import {useData} from './data';\r\n\r\n export default function Comments() {\r\n   const comments = useData();\r\n   return (\r\n     <>\r\n       {comments.map((comment, i) => (\r\n         <p className=\"comment\" key={i}>\r\n           {comment}\r\n         </p>\r\n       ))}\r\n     </>\r\n   );\r\n }\r\n ","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nimport { createContext, useContext } from 'react';\r\n\r\n// Note: this file does not demonstrate a real data fetching strategy.\r\n// We only use this to simulate data fetching happening on the server\r\n// while the cache is populated on the client. In a real app, you would\r\n// instead use a data fetching library or Server Components for this.\r\n\r\nconst DataContext = createContext(null);\r\n\r\nexport function DataProvider({ children, data }) {\r\n    return <DataContext.Provider value={data}>{children}</DataContext.Provider>;\r\n}\r\n\r\n// In a real implementation the data would be streamed with the HTML.\r\n// We haven't integrated this part yet, so we'll just use fake data.\r\nconst fakeData = [\r\n    \"Wait, it doesn't wait for React to load?\",\r\n    'How does this even work?',\r\n    'I like marshmallows',\r\n];\r\n\r\nexport function useData() {\r\n    const ctx = useContext(DataContext);\r\n    if (ctx !== null) {\r\n        // This context is only provided on the server.\r\n        // It is here to simulate a suspending data fetch.\r\n        ctx.read();\r\n    }\r\n    return fakeData;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAQA;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;A","sourceRoot":""}